JS functions -> A JavaScript function is a block of code designed to perform a particular task.
				A function can be invoked whenever needed.
				With functions you can reuse code.
				To avoid code redundency.

Function Syntax -> A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().
				   Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).
				   The parentheses may include parameter names separated by commas: (parameter1, parameter2, ...)
				   The code to be executed, by the function, is placed inside curly brackets: {}
				   
				   syntax : function name(parameter1, parameter2, parameter3) {
 				   	 			// code to be executed
				   			}

The () Operator -> The () operator invokes (calls) the function
				   syntax : functionName()

parameter and argument -> varible used in function defination is called parameter.
						  Parameters of a function are like local variables and they have only block scope
						  while the value which we pass during the function call is called argument

Local Variables -> Variables declared within a JavaScript function, become LOCAL to the function.
				   Local variables can only be accessed from within the function.
				   Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
				   Local variables are created when a function starts, and deleted when the function is completed.

Hoisting -> JavaScript Hoisting refers to the process whereby the interpreter appears to move the declaration of functions, variables, 				classes, or imports to the top of their scope, prior to execution of the code.
			In JS you can call or invoke a function before or after that function is decleared.It is because of Hoisting.
			Hoisting is the process od moving function decleartion to the top of the file automatically by JS engine.